#!/usr/bin/perl -w

use File::Temp qw/tempfile tempdir/;
use File::Basename;
use Getopt::Std;
use Cwd;
use List::Util qw/max/;


#       _       _           _                       
#  __ _| | ___ | |__   __ _| | __   ____ _ _ __ ___ 
# / _` | |/ _ \| '_ \ / _` | | \ \ / / _` | '__/ __|
#| (_| | | (_) | |_) | (_| | |  \ V / (_| | |  \__ \
# \__, |_|\___/|_.__/ \__,_|_|   \_/ \__,_|_|  |___/
# |___/                                             

$debug = 0;
$verbose_level = 0;
$version = '0.1.0';

#           _                     _   _                 
# ___ _   _| |__  _ __ ___  _   _| |_(_)_ __   ___  ___ 
#/ __| | | | '_ \| '__/ _ \| | | | __| | '_ \ / _ \/ __|
#\__ \ |_| | |_) | | | (_) | |_| | |_| | | | |  __/\__ \
#|___/\__,_|_.__/|_|  \___/ \__,_|\__|_|_| |_|\___||___/
                                                       


sub usage()
{
my $me = basename($0);
print $me." - $version\n";
print <<'EOF';
A set of useful utilities for working with the run command.

commands:
EOF

for $cmd (keys(%commands) )
{
  printf( "\t%-".(max(map{length}keys(%commands)))."s - %s\n", $cmd, $commands{$cmd}{help});
}
}

sub cmd_exists
{
  my $cmd = shift;
  my $e = system("which $cmd > /dev/null 2>&1");

  return !$e;
}

sub import_optional_packages
{
  require Data::Dumper;
  Data::Dumper->import();
}

#                                               _     
#  ___ ___  _ __ ___  _ __ ___   __ _ _ __   __| |___ 
# / __/ _ \| '_ ` _ \| '_ ` _ \ / _` | '_ \ / _` / __|
#| (_| (_) | | | | | | | | | | | (_| | | | | (_| \__ \
# \___\___/|_| |_| |_|_| |_| |_|\__,_|_| |_|\__,_|___/
                                                     

sub time_cmd {
  opendir(DIR,".");
  my @files = grep(/^_.*\.o[0-9]+$/, readdir(DIR) );
  closedir(DIR);

  my %times= ();
  for my $file (@files)
  {

    open(FILE, "<$file");
    my @lines = grep(/Begin|End/, <FILE>);
    close(FILE);

    if( @lines > 0 )
    {
      $times{$file} = {interval=>{begin=>0, end=>0}, total=>0};
    }
    for my $line (@lines)
    {
      $times{$file}->{interval}->{begin} = $1 if( $line =~ /Begin:\s*([0-9 :]+)/ );
      $times{$file}->{interval}->{end}   = $1 if( $line =~ /End:\s*([0-9 :]+)/ );
    }
  }

  for my $file (keys(%times))
  {
    my $interval = $times{$file}->{interval};

    my $begin = `date +%s --date='$interval->{begin}'`;
    my $end   = `date +%s --date='$interval->{end}'`;
    my $diff = $end - $begin;
    if( $diff < 0 )
    {
      $interval->{duration} = "unfinished";
    }
    else
    {
      $interval->{duration} = $diff;
      $times{$file}->{total} += $diff;
    }
  }



  my $fnw = max(map {length($_)} keys(%times));
  for my $file (keys(%times))
  {
    if( $times{$file}->{interval}->{duration} =~ /unfinished/ )
    {
      printf("%-${fnw}s : unfinished\n" , $file);
    }
    else
    {
      printf("%-${fnw}s : %s s\n" , $file, $times{$file}->{total});
    }
  }


}

sub clean_cmd {
  print "clean - comming soon\n";
}

%commands  = (
               time  => { func => \&time_cmd,  help => "collect information about run times." },
               clean => { func => \&clean_cmd, help => "clean files created by the run command." },
             );




#                 _       
# _ __ ___   __ _(_)_ __  
#| '_ ` _ \ / _` | | '_ \ 
#| | | | | | (_| | | | | |
#|_| |_| |_|\__,_|_|_| |_|

$tempdir = tempdir(CLEANUP => $debug ? 0 : 1) or die "Cannot make temp dir.  Unable to proceed - aborting.";
                         

our(
  $opt_h ,
  $opt_v ,
  $opt_V ,
  $opt_D ,
   );

getopt('V');

# help
if($opt_h)
{
  usage();
  exit(0);
}

$debug         = 1      if ($opt_D);
$opt_v         = $opt_V if ($opt_V);
$verbose_level = $opt_v if ($opt_v);
$verbose_level = 100    if ($debug);


if( $debug )
{
  import_optional_packages();
}


$cmd_str = shift;


undef $cmd;
@matches = grep( /^$cmd_str/, keys(%commands) );
if( @matches < 2 )
{
  $cmd = $commands{$cmd_str};
}

if( defined( $cmd ) )
{
  $cmd->{func}->(@ARGV);
}
else
{
 print "Error: '$cmd_str' is not a reconized command. Did you mispell it?\n"     if( @matches < 2 );
 if( @matches > 1 )
 {
   print "Error: '$cmd_str' matches multiple commands:\n";
   print "\t".join("\n\t", @matches)."\n\n";
   print "Please be more specific.\n";
 }
 print "\n";
 usage();
 exit(1);
}

exit(0);

